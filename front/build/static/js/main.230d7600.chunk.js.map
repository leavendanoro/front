{"version":3,"sources":["SignIn.js","App.js","serviceWorker.js","index.js"],"names":["crypto","require","algorithm","password","encrypt","text","cipher","createCipher","crypted","update","final","SignIn","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","bind","assertThisInitialized","e","preventDefault","Body","query","variables","credentials","username","document","getElementById","value","axios","post","then","res","data","login","alert","sessionStorage","setItem","catch","err","console","log","react_default","a","createElement","className","onSubmit","type","id","Component","App","src_SignIn_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oWAIMA,UAASC,EAAQ,MACnBC,EAAY,cACZC,EAAW,WAEf,SAASC,EAAQC,GACb,IAAIC,EAASN,EAAOO,aAAaL,EAAUC,GACvCK,EAAUF,EAAOG,OAAOJ,EAAK,OAAO,OAExC,OADAG,GAAWF,EAAOI,MAAM,WA2DbC,cAvDX,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,aAAeP,EAAKO,aAAaC,KAAlBP,OAAAQ,EAAA,EAAAR,CAAAD,IAFNA,oHAICU,gFACfA,EAAEC,iBACIC,EAAO,CACTC,MAAK,2IAKLC,UAAU,CACNC,YAAY,CACRC,SAAUC,SAASC,eAAe,YAAYC,MAC9C7B,SAAUC,EAAQ0B,SAASC,eAAe,YAAYC,mBAI5DC,IACLC,KAAK,gCAAiCT,GACtCU,KAAK,SAAAC,GACF,IAAIC,EAAOD,EAAIC,KAAKA,KAAKC,MACb,OAATD,EACCE,MAAM,8BACQ,wBAATF,EACLE,MAAMF,IAENG,eAAeC,QAAQ,QAASJ,GAChCE,MAAM,0BAGbG,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,oIAG1B,OACIG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,QAAME,SAAUlC,KAAKI,cACjB0B,EAAAC,EAAAC,cAAA,wBAEIF,EAAAC,EAAAC,cAAA,SAAOG,KAAK,OAAOC,GAAG,cAH9B,IAIaN,EAAAC,EAAAC,cAAA,WACTF,EAAAC,EAAAC,cAAA,wBAEIF,EAAAC,EAAAC,cAAA,SAAOG,KAAK,WAAWC,GAAG,cAPlC,IAQaN,EAAAC,EAAAC,cAAA,WACTF,EAAAC,EAAAC,cAAA,SAAOG,KAAK,SAASnB,MAAM,qBAhD9BqB,oBCFNC,MARf,WACE,OACER,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACO,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASjC,SAASC,eAAe,SD2H3C,kBAAmBiC,WACrBA,UAAUC,cAAcC,MAAM/B,KAAK,SAAAgC,GACjCA,EAAaC","file":"static/js/main.230d7600.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport axios from 'axios';\nimport './SignIn.css';\n\nconst crypto = require('crypto'),\n    algorithm = 'aes-256-ctr',\n    password = 'd6F3Efeq';\n\nfunction encrypt(text){\n    var cipher = crypto.createCipher(algorithm,password)\n    var crypted = cipher.update(text,'utf8','hex')\n    crypted += cipher.final('hex');\n    return crypted;\n}\nclass SignIn extends Component {\n    constructor(props){\n        super(props);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }    \n    async handleSubmit(e){\n        e.preventDefault();\n        const Body = {\n            query:`\n            mutation Login ($credentials: LoginInput!){\n                login(credentials: $credentials)\n            }\n            `,\n            variables:{\n                credentials:{\n                    username: document.getElementById(\"username\").value,\n                    password: encrypt(document.getElementById(\"password\").value)\n                }\n            }\n        }\n        await axios\n        .post('http://192.168.99.101/graphql', Body)\n        .then(res => {\n            let data = res.data.data.login;\n            if(data === '-1'){\n                alert('Usuario no autenticado ...')\n            }else if(data === 'LDAPException found'){\n                alert(data)\n            }else{\n                sessionStorage.setItem('token', data)\n                alert('Usuario autenticado')\n            }\n        })\n        .catch(err => console.log(err))\n    }\n    render(){\n        return(\n            <div className='Body'>\n                <div className='Box'>\n                    <form onSubmit={this.handleSubmit}>\n                        <label>\n                            Username\n                            <input type='text' id='username'/>\n                        </label> <br/>\n                        <label>\n                            Password\n                            <input type='password' id='password'/>\n                        </label> <br/>\n                        <input type='submit' value='Log In'/>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default SignIn;","import React from 'react';\nimport SignIn from './SignIn';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SignIn/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}